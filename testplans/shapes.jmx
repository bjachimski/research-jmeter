<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="External REST Endpoint Shape Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">These are the test plans to use for shape testing</stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Groovy Utilities" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
def processFailureMessage(failureMessage) {
	if (failureMessage?.trim()) {
		AssertionResult.setFailureMessage(failureMessage);
		AssertionResult.setFailure(true);
	}	
}

def checkMandatoryFieldForValue(val, name, isMandatory) {
	if (val == null) {
		return &quot;+++ shape change: missing mandatory property [&quot;+name+&quot;]&quot;;
	} else if (val == &quot;&quot; ) {
		return &quot;+++ shape change: mandatory property [&quot;+name+&quot;] has missing value [&quot;+val+&quot;]&quot;;
	} else {
		return &quot;&quot;;
	}
}

def processResponseShape(failureMessage) {
	// TODO
	return &quot;&quot;;
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1510803938000</longProp>
        <longProp name="ThreadGroup.end_time">1510803938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="[MC] - Groovy Utilities" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="1291727108">External REST Endpoint Shape Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">macvendors.co</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/00:80:92:78:40:51/json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="[JA] - 200" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

JsonSlurper JSON = new JsonSlurper();

def failureMessage = &quot;&quot;;
def json;

try {
	json = JSON.parseText(prev.getResponseDataAsString());	
} catch (Exception e) {
	failureMessage += &quot;Expected response code [200] but to [&quot;+prev.getResponseCode()+&quot;]&quot;;
}

if (failureMessage?.trim()) {
	AssertionResult.setFailureMessage(failureMessage);
	AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="[JA] - Shape" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

JsonSlurper JSON = new JsonSlurper();

def failureMessage = &quot;&quot;;	

//assert jsonResponse instanceof Map

// parent nodes
def root = JSON.parseText(prev.getResponseDataAsString());

// for root parent node, use helper to check expected children; for all others
// it&apos;s brut force
if (!root.keySet().containsAll([&quot;result&quot;])) {
	failureMessage += &quot;root shape has changed [&quot;+jsonResponse.keySet()+&quot;]&quot;;
}

// leaf nodes
// e.g. result.company|result.mac_prefix|result.address|result.start_hex|result.end_hex|result.country|result.type
failureMessage += checkMandatoryFieldForValue(root.result.company, &quot;result.company&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.mac_prefix, &quot;result.mac_prefix&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.address, &quot;result.address&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.start_hex, &quot;result.start_hex&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.end_hex, &quot;result.end_hex&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.country, &quot;result.country&quot;, true);
failureMessage += checkMandatoryFieldForValue(root.result.type, &quot;result.type&quot;, true);
//failureMessage += checkMandatoryFieldForValue(root.result.typex, &quot;result.typex&quot;, true);

// run standard shape test on the overall response
failureMessage += processResponseShape(failureMessage);

// standard last step
processFailureMessage(failureMessage);

// turn these into utilities
/*
def processFailureMessage(failureMessage) {
	if (failureMessage?.trim()) {
		AssertionResult.setFailureMessage(failureMessage);
		AssertionResult.setFailure(true);
	}	
}

def checkMandatoryFieldForValue(val, name, isMandatory) {
	if (val == null) {
		return &quot;+++ shape change: missing mandatory property [&quot;+name+&quot;]&quot;;
	} else if (val == &quot;&quot; ) {
		return &quot;+++ shape change: mandatory property [&quot;+name+&quot;] has missing value [&quot;+val+&quot;]&quot;;
	} else {
		return &quot;&quot;;
	}
}

def processResponseShape(failureMessage) {
	// TODO
	return &quot;&quot;;
}
*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
